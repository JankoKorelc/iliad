@node Widgets
@chapter Widgets

@cindex widget
@cindex buildable

@menu
* Maintaining the user interface state::
* Maintaining the client state::
* Dependent widgets::
* Interacting with other widgets:: 
* Sequencing with @code{ILSequence}::
* Widget decorators::
* Redirecting::
* Updating the @code{<head>} section of the page::
@end menu

Iliad web pages are composed of embedded Widgets. Widgets are high-level, reusable graphical objects. Widgets are not only about building HTML, they also hold the state of web applications and will persist through requests. @code{ILWidget} is probably the most important class of Iliad, as widgets will compose most of your user interfaces and control flow.

@node Maintaining the user interface state
@section Maintaining the user interface state

To store the user interface state, applications and widgets must know and store their children. Applications themselves are stored in sessions (@pxref{Managing sessions}). Widgets are stored in instance variables in a tree of widgets by their parent, applications or other widgets. During a request processing, after the actions evaluation step, widgets are rebuilt and sent to the client in HTML or JSON (@pxref{Maintaining the client state}).

@node Maintaining the client state
@section Maintaining the client state

@cindex markDirty
@cindex dirty widgets

When updating the client state, refreshing the entire page to update some widgets - therefore rebuilding the entire application with all its children widgets - would be a waste of bandwidth and time. Iliad is designed to automatically build full-blown AJAX applications without hard-coding Javascript inside the HTML page. Because Iliad uses a thin Javascript layer, your content will automatically degrade on clients that don't have Javascript enabled.

@sp 1
With Javascript enabled web browsers, Iliad automatically uses AJAX to update the client state. The javascript layer (@pxref{The Javascript layer}) catches clicks on anchors with actions and form submissions, and send to the server a XmlHTTPRequest. During the request processing, widgets which state has changed are sent back to the browser in JSON. The Javascript layer will then update the page with the new data to keep the client state up-to-date. 

@sp 1 
The @code{#markDirty} method is used to inform Iliad that a widget's state has changed. It will rebuild it and send it's new HTML contents in JSON to the client.


@node Dependent widgets
@section Dependent widgets

@node Interacting with other widgets
@section Interacting with other widgets


@node Sequencing with @code{ILSequence}
@section Sequencing with @code{ILSequence}

@node Widget decorators
@section Widget decorators

@node Redirecting
@section Redirecting

@node Updating the @code{<head>} section of the page
@section Updating the @code{<head>} section of the page
